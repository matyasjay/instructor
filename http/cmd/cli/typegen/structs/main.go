package main

import (
	"fmt"
	"http/pkg/util"
	"log"
	"os"
	"strings"

	"github.com/duythinht/dbml-go/parser"
	"github.com/duythinht/dbml-go/scanner"
)

var schemaPath = "../database/schema.dbml"
var modelPath = "pkg/model/database.go"
var output ="// DO NOT EDIT. This file is automatically generated.\n\npackage model\n\n"


func parseSchema(path string) (string, error)  {
	f, _ := os.Open(path)
	s := scanner.NewScanner(f)
	parser := parser.NewParser(s)
	dbml, err := parser.Parse()
	if err != nil {
		return "", err
	}

	table := len(dbml.Tables) - 1
	for table != -1 {
		currentTable := dbml.Tables[table]
		output = output + fmt.Sprintf("type %v struct {\n", currentTable.Name)
		table = table - 1

		column := len(currentTable.Columns) - 1
		for column != -1 {
			currentColumn := currentTable.Columns[column]
			output = output + fmt.Sprintf("\t%v %v\n",
				util.PascalCase(currentColumn.Name),
				util.DbmlToStruct(currentColumn.Type))
			column = column - 1
		}
		output = output + "}\n\n"
	}

	lines := strings.Split(output, "\n")
	output, err = resolveCycles(lines)
	if err != nil {
		os.Exit(1)
	}

	return output, nil
}

func resolveCycles(lines []string) (string, error) {
	var safeLines []string

	for _, line := range lines {
		fields := strings.Fields(line)
		if len(fields) == 2 {
			fieldName := fields[0]
			typeName := fields[1]
			if fieldName == typeName {
				continue
			}
		}
		safeLines = append(safeLines, line)
	}

	output = strings.Join(safeLines, "\n")

	return output, nil
}

func main() {
	output, err := parseSchema(schemaPath)
	if err != nil {
		os.Exit(1)
	}

	err = os.WriteFile(modelPath, []byte(output), 0644)
	if err != nil {
		log.Fatal(err)
	}
}
